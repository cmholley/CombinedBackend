<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans	
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd">

	<import resource="webSecurityConfig.xml" />
	<import resource="aop-context.xml"/>
	
	<context:component-scan base-package="dash.*" />

	<!-- ************ JPA and AOP configuration *********** -->
	<tx:annotation-driven mode="aspectj"
		transaction-manager="transactionManager" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="autodetectDataSource" value="false" />
	</bean>

	<bean id="sessionFactory" class="dash.multitenancy.LocalSessionFactoryBean">
		<property name="dataSourceMap" ref="datasources" />
		<property name="dataSource" ref="dashDS_CHW" />
		<property name="hibernateProperties">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
				<entry key="hibernate.show_sql" value="true" />
				<entry key="hibernate.multiTenancy" value="SCHEMA" />
				<entry key="hibernate.tenant_identifier_resolver" value-ref="webSessionTenantIdentifierResolver" />
				<entry key="hibernate.multi_tenant_connection_provider"
					value-ref="simpleTenantConnectionProvider" />
			</map>
		</property>
		    <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
	</bean>

	<bean id="webSessionTenantIdentifierResolver"
		class="dash.multitenancy.WebSessionCurrentTenantIdentifierResolver"
		scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="simpleTenantConnectionProvider"
		class="dash.multitenancy.SimpleMultiTenantConnectionProvider">
		<property name="dataSourceMap" ref="datasources" />
	</bean>

	<!-- Map to hold all data sources -->
	<util:map id="datasources">
		<entry key="tenantCHW" value-ref="dashDS_CHW" />
		<entry key="tenantVMA" value-ref="dashDS_VMA" />
	</util:map>

	<bean id="dashDS_CHW" class="org.springframework.jndi.JndiObjectFactoryBean"
		scope="singleton">
		<property name="jndiName" value="java:comp/env/jdbc/dashDB_CHW" />
		<property name="resourceRef" value="true" />
	</bean>

	<bean id="dashDS_VMA" class="org.springframework.jndi.JndiObjectFactoryBean"
		scope="singleton">
		<property name="jndiName" value="java:comp/env/jdbc/dashDB_VMA" />
		<property name="resourceRef" value="true" />
	</bean>

	<bean id="userDao" class="dash.dao.UserDaoJPA2Impl" />
	<bean id="userService" class="dash.service.UserServiceDbAccessImpl" />
	<bean id="userResource" class="dash.pojo.UsersResource" />

	<bean id="groupDao" class="dash.dao.GroupDaoJPA2Impl" />
	<bean id="groupService" class="dash.service.GroupServiceDbAccessImpl" />
	<bean id="groupResource" class="dash.pojo.GroupResource" />

	<bean id="taskDao" class="dash.dao.TaskDaoJPA2Impl" />
	<bean id="taskService" class="dash.service.TaskServiceDbAccessImpl" />
	<bean id="taskResource" class="dash.pojo.TaskResource" />

	<bean id="postDao" class="dash.dao.PostDaoJPA2Impl" />
	<bean id="postService" class="dash.service.PostServiceDbAccessImpl" />
	<bean id="postResource" class="dash.pojo.PostResource" />

	<bean id="commentDao" class="dash.dao.CommentDaoJPA2Impl" />
	<bean id="commentService" class="dash.service.CommentServiceDbAccessImpl" />
	<bean id="commentResource" class="dash.pojo.CommentResource" />

	<bean id="messageDao" class="dash.dao.MessageDaoJPA2Impl" />
	<bean id="messageService" class="dash.service.MessageServiceDbAccessImpl" />
	<bean id="messageResource" class="dash.pojo.MessageResource" />

	<bean id="hourDao" class="dash.dao.HourDaoJPA2Impl" />
	<bean id="hourService" class="dash.service.HourServiceDbAccessImpl" />
	<bean id="hourResource" class="dash.pojo.HourResource" />

	<bean id="locationDao" class="dash.dao.LocationDaoJPA2Impl" />
	<bean id="locationService" class="dash.service.LocationServiceDbAccessImpl" />
	<bean id="locationResource" class="dash.pojo.LocationResource" />

	<bean id="classDao" class="dash.dao.ClassDaoJPA2Impl" />
	<bean id="classService" class="dash.service.ClassServiceDbAccessImpl" />
	<bean id="classResource" class="dash.pojo.ClassResource" />


	<bean id="aclController" class="dash.security.GenericAclController" />

	<!-- ************ Email Beans *********** -->

	<!-- Due to a lack of a local email host, a gmail connection is provided 
		for local development. If the server has a mail client enabled, use the mailSender 
		bean that connects to localhost rather than to the gmail -->

	<!-- For the server -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="localhost" />
		<property name="port" value="25" />
		<property name="protocol" value="smtp" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtps.auth">false</prop>
				<prop key="mail.smtp.ssl.enable">false</prop>
				<prop key="mail.transport.protocol">smtp</prop>
			</props>
		</property>
	</bean>

	<!--For local development -->

	<!--<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="smtp.gmail.com" /> <property name="port" value="465" 
		/> <property name="username" value="formbuildertest@gmail.com" /> <property 
		name="password" value="test1234test" /> <property name="protocol" value="smtps" 
		/> <property name="javaMailProperties"> <props> <prop key="mail.smtps.auth">true</prop> 
		<prop key="mail.smtp.ssl.enable">true</prop> <prop key="mail.transport.protocol">smtps</prop> 
		</props> </property> </bean> -->

	<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="formbuildertest@gmail.com" />
		<property name="subject" value="Test" />
	</bean>
</beans>